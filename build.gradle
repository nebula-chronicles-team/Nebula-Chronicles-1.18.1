tasks.withType (JavaCompile) { options.encoding = "UTF-8" }

buildscript {
    repositories {
        // maven { url "https://maven.aliyun.com/repository/public/" }
        // maven { url = 'https://bmclapi2.bangbang93.com/maven' }
        maven { url = 'https://maven.minecraftforge.net' }

        maven { url 'https://maven.parchmentmc.org' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'   // Parchment mappings.
        classpath "io.github.luiqn2007.gradle_plugins:UselessGradlePlugin:1.2.6"
        classpath group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.2'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'   // Parchment mappings.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.github.luiqn2007.gradle_plugins.build_tasks"

version = mod_version
group = maven_group
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
// println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: channel, version: channel_version
    accessTransformer = file('src/main/resources/META-INF/nch_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                nch {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                nch {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'nch', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                nch {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.tterrag.com' }
    maven { url 'https://www.cursemaven.com' }
    maven { url 'https://repo.maven.apache.org/maven2' }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven {
        url 'https://cursemaven.com'
        content { includeGroup "curse.maven" }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    //implementation fg.deobf("curse.maven:scannable-266784:3551507")
    compileOnly 'in.lq2007:UselessPluginLib:1.2.0'
    compileOnly group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.2'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "nebulachronicles",
                "Specification-Vendor"    : "NebulaChronicles Team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "NebulaChronicles Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.getByName("jar").configure {
    exclude 'io/github/nebulachroniclesteam/nch/codegen/*'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

sourceTasks {
    packageName = "io.github.nebulachroniclesteam.nch.codegen"
}
